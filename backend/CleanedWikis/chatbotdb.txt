Hi :: Hello there, how are you?
Good :: I'm glad to here that. What question would you like to ask?
Okay :: I hope your day gets better. What question would you like to ask?
Bad :: Thats not good to hear :( I hope your day gets better. What question would you like to ask?

What is faster O(n^2) or O(2^n)? :: O(2^n) is faster
What is faster O(n) or O(n^2)? :: O(n^2) is faster
What is faster O(n^2) or O(log n)? :: O(n^2) is faster
What is faster O(n) or O(n!)? :: O(n!) is faster
What is faster O(nlog n) or O(log n)? :: O(nlog n) is faster

What is bubble sort? :: Bubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in the wrong order. This algorithm is not suitable for large data sets as its average and worst-case time complexity is quite high.
What is the time complexity of bubble sort? :: Time Complexity of bubble sort is O(N^2)
What is the space complexity of bubble sort? :: Auxiliary Space of bubble sort is O(1)
What is the worst case condition for bubble sort? :: The worst-case condition for bubble sort occurs when elements of the array are arranged in decreasing order. In the worst case, the total number of iterations or passes required to sort a given array is (n-1). where ‘n’ is a number of elements present in the array.
What is the worst, average, and best case time complexity for bubble sort? :: Worst and Average Case Time Complexity of bubble sort is O(N2). The worst case occurs when an array is reverse sorted. Best Case Time Complexity of bubble sort is O(N). The best case occurs when an array is already sorted. Auxiliary Space: O(1)
What is the Boundary Case for Bubble sort? :: Bubble sort takes minimum time (Order of n) when elements are already sorted. Hence it is best to check if the array is already sorted or not beforehand, to avoid O(N2) time complexity.
Does sorting happen in place in Bubble sort? :: Yes, Bubble sort performs swapping of adjacent pairs without the use of any major data structure. Hence Bubble sort algorithm is an in-place algorithm.
Is the Bubble sort algorithm stable? :: Yes, the bubble sort algorithm is stable.
When is the Bubble sort algorithm used? :: Due to its simplicity, bubble sort is often used to introduce the concept of a sorting algorithm. In computer graphics, it is popular for its capability to detect a tiny error (like a swap of just two elements) in almost-sorted arrays and fix it with just linear complexity (2n). 

What is insertion sort? :: Insertion sort is a simple sorting algorithm that works similar to the way you sort playing cards in your hands. The array is virtually split into a sorted and an unsorted part. Values from the unsorted part are picked and placed at the correct position in the sorted part.
What are the characteristics of insertion sort? :: This algorithm is one of the simplest algorithm with simple implementation. Basically, Insertion sort is efficient for small data values. Insertion sort is adaptive in nature, i.e. it is appropriate for data sets which are already partially sorted.
What is the algorithm for insertion sort? :: To sort an array of size N in ascending order: Iterate from arr[1] to arr[N] over the array. Compare the current element (key) to its predecessor. If the key element is smaller than its predecessor, compare it to the elements before. Move the greater elements one position up to make space for the swapped element.
What is the time complexity of insertion sort :: Time Complexity of insertion sort is O(N^2) 
What is the space complexity of bubble sort? :: Auxiliary Space of insertion sort is O(1)
What are the Boundary Cases of the Insertion Sort algorithm? :: Insertion sort takes maximum time to sort if elements are sorted in reverse order. And it takes minimum time (Order of n) when elements are already sorted. 
What are the Algorithmic Paradigm of Insertion Sort algorithm? :: Insertion Sort algorithm follows incremental approach.
Is Insertion Sort an in-place sorting algorithm? :: Yes, insertion sort is an in-place sorting algorithm.
Is Insertion Sort a stable algorithm? :: Yes, insertion sort is a stable sorting algorithm.
When is the Insertion Sort algorithm used? :: Insertion sort is used when number of elements is small. It can also be useful when input array is almost sorted, only few elements are misplaced in complete big array.

What is merge sort? :: The Merge Sort algorithm is a sorting algorithm that is based on the Divide and Conquer paradigm. In this algorithm, the array is initially divided into two equal halves and then they are combined in a sorted manner.
How does merge sort work? :: Think of it as a recursive algorithm continuously splits the array in half until it cannot be further divided. This means that if the array becomes empty or has only one element left, the dividing will stop, i.e. it is the base case to stop the recursion. If the array has multiple elements, split the array into halves and recursively invoke the merge sort on each of the halves. Finally, when both halves are sorted, the merge operation is applied. Merge operation is the process of taking two smaller sorted arrays and combining them to eventually make a larger one.
What is the time complexity of merge sort? :: Time Complexity of merge sort is O(N log(N))
What is the recurrence relation of merge sort? :: Merge Sort is a recursive algorithm and time complexity can be expressed as following recurrence relation. T(n) = 2T(n/2) + θ(n). The recurrence can be solved either using the Recurrence Tree method or the Master method. It falls in case II of the Master Method and the solution of the recurrence is θ(Nlog(N)). The time complexity of Merge Sort isθ(Nlog(N)) in all 3 cases (worst, average, and best) as merge sort always divides the array into two halves and takes linear time to merge two halves.
What is the space complexity of merge sort? :: Auxiliary Space: O(n), In merge sort all elements are copied into an auxiliary array. So N auxiliary space is required for merge sort.
Is Merge sort In Place? :: No, In merge sort the merging step requires extra space to store the elements.
Is Merge sort Stable? :: Yes, merge sort is stable. 
How can we make Merge sort more efficient? :: Merge sort can be made more efficient by replacing recursive calls with Insertion sort for smaller array sizes, where the size of the remaining array is less or equal to 43 as the number of operations required to sort an array of max size 43 will be less in Insertion sort as compared to the number of operations required in Merge sort.

What is divide and conquer? :: This technique can be divided into the following three parts: Divide: This involves dividing the problem into smaller sub-problems. Conquer: Solve sub-problems by calling recursively until solved. Combine: Combine the sub-problems to get the final solution of the whole problem.
What are the advantages of divide and conquer algorithms? :: The difficult problem can be solved easily. It divides the entire problem into subproblems thus it can be solved parallelly ensuring multiprocessing. Efficiently uses cache memory without occupying much space. Reduces time complexity of the problem.
What are the disadvantages of divide and conquer algorithms? :: It involves recursion which is sometimes slow. Efficiency depends on the implementation of logic. It may crash the system if the recursion is performed rigorously
